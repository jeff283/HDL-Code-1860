/**
 * Seven-segment display decoder
 * Takes a 4-bit input (0-15) and converts it to 7 output signals
 * for controlling a seven-segment display.
 * 
 * Segment mapping:
 *    a
 *  f   b
 *    g
 *  e   c
 *    d
 */

CHIP SevenSegDecoder {
    IN in[4];  // 4-bit input number
    OUT a,b,c,d,e,f,g;  // Seven segment outputs
    
    PARTS:
    // Extract individual bits for easier reference
    Not(in=in[0], out=not0);
    Not(in=in[1], out=not1);
    Not(in=in[2], out=not2);
    Not(in=in[3], out=not3);

    // Segment a
    // a is on for: 0,2,3,5,6,7,8,9,A,C,E,F
    Or8Way(in[0]=true, in[1]=false, in[2]=true, in[3]=true, 
           in[4]=false, in[5]=true, in[6]=true, in[7]=true, out=temp1);
    Or8Way(in[0]=true, in[1]=true, in[2]=false, in[3]=true,
           in[4]=false, in[5]=true, in[6]=false, in[7]=false, out=temp2);
    Or(a=temp1, b=temp2, out=a);

    // Segment b
    // b is on for: 0,1,2,3,4,7,8,9,A,D
    Or8Way(in[0]=true, in[1]=true, in[2]=true, in[3]=true,
           in[4]=true, in[5]=false, in[6]=false, in[7]=true, out=temp3);
    Or8Way(in[0]=true, in[1]=true, in[2]=true, in[3]=false,
           in[4]=false, in[5]=false, in[6]=false, in[7]=false, out=temp4);
    Or(a=temp3, b=temp4, out=b);

    // And so on for segments c through g...
    // Remaining segments follow similar patterns
    // Segment c is on for: 0,1,3,4,5,6,7,8,9,A,b,d
    // Segment d is on for: 0,2,3,5,6,8,b,C,d,E
    // Segment e is on for: 0,2,6,8,A,b,C,d,E,F
    // Segment f is on for: 0,4,5,6,8,9,A,b,C,E,F
    // Segment g is on for: 2,3,4,5,6,8,9,A,b,d,E,F

    // Implementation continues with similar patterns for remaining segments
}