
// File: SevenSegmentDecoder.hdl
// Purpose: Converts 4-bit binary numbers into 7-segment display signals
CHIP SevenSegmentDecoder {
    IN in[4];
    OUT a, b, c, d, e, f, g;
    
    PARTS:
    // Segment a is on for numbers 0,2,3,5,6,7,8,9
    Or8Way(
        in[0]=zero, in[1]=two, in[2]=three, in[3]=five,
        in[4]=six, in[5]=seven, in[6]=eight, in[7]=nine,
        out=a
    );
    
    // Segment b is on for numbers 0,1,2,3,4,7,8,9
    Or8Way(
        in[0]=zero, in[1]=one, in[2]=two, in[3]=three,
        in[4]=four, in[5]=seven, in[6]=eight, in[7]=nine,
        out=b
    );
    
    // Segment c is on for numbers 0,1,3,4,5,6,7,8,9
    Or8Way(
        in[0]=zero, in[1]=one, in[2]=three, in[3]=four,
        in[4]=five, in[5]=six, in[6]=seven, in[7]=eight,
        out=c
    );
    
    // Segment d is on for numbers 0,2,3,5,6,8,9
    Or8Way(
        in[0]=zero, in[1]=two, in[2]=three, in[3]=five,
        in[4]=six, in[5]=eight, in[6]=nine, in[7]=false,
        out=d
    );
    
    // Segment e is on for numbers 0,2,6,8
    Or8Way(
        in[0]=zero, in[1]=two, in[2]=six, in[3]=eight,
        in[4..7]=false,
        out=e
    );
    
    // Segment f is on for numbers 0,4,5,6,8,9
    Or8Way(
        in[0]=zero, in[1]=four, in[2]=five, in[3]=six,
        in[4]=eight, in[5]=nine, in[6..7]=false,
        out=f
    );
    
    // Segment g is on for numbers 2,3,4,5,6,8,9
    Or8Way(
        in[0]=two, in[1]=three, in[2]=four, in[3]=five,
        in[4]=six, in[5]=eight, in[6]=nine, in[7]=false,
        out=g
    );
    
    // Number decoder - converts binary input to individual number signals
    DMux8Way(in=true, sel=in[0..2],
        a=n0, b=n1, c=n2, d=n3,
        e=n4, f=n5, g=n6, h=n7);
        
    DMux8Way(in=true, sel=in[1..3],
        a=n8, b=n9, c=n10, d=n11,
        e=n12, f=n13, g=n14, h=n15);
    
    // Map decoded numbers to their respective variables
    And(a=n0, b=!in[3], out=zero);
    And(a=n1, b=!in[3], out=one);
    And(a=n2, b=!in[3], out=two);
    And(a=n3, b=!in[3], out=three);
    And(a=n4, b=!in[3], out=four);
    And(a=n5, b=!in[3], out=five);
    And(a=n6, b=!in[3], out=six);
    And(a=n7, b=!in[3], out=seven);
    And(a=n8, b=!in[3], out=eight);
    And(a=n9, b=!in[3], out=nine);
}