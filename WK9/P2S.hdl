CHIP P2S {
    IN indata[4], enable, load;
    OUT sout, complete;

    PARTS:
    // Flip-flops to store the 4-bit input data
    DFF(in=bit0Load, out=stored0);
    DFF(in=bit1Load, out=stored1);
    DFF(in=bit2Load, out=stored2);
    DFF(in=bit3Load, out=stored3);

    // Multiplexers for loading data
    Mux(a=stored0, b=indata[0], sel=load, out=bit0Load);
    Mux(a=stored1, b=indata[1], sel=load, out=bit1Load);
    Mux(a=stored2, b=indata[2], sel=load, out=bit2Load);
    Mux(a=stored3, b=indata[3], sel=load, out=bit3Load);

    // 2-bit counter for selecting which bit to output
    DFF(in=nextCount0, out=count0);
    DFF(in=nextCount1, out=count1);

    // Logic for counter increment
    And(a=enable, b=true, out=countEnable);
    Xor(a=count0, b=enable, out=nextCount0);
    And(a=count0, b=enable, out=carry);
    Xor(a=count1, b=carry, out=nextCount1);

    // Multiplexer for output selection based on counter
    Mux4Way16(a[0]=stored0, b[0]=stored1, c[0]=stored2, d[0]=stored3,
              sel[0]=count0, sel[1]=count1, out[0]=sout);

    // Logic for the complete signal
    And(a=count0, b=count1, out=completeCycle);
    And(a=completeCycle, b=enable, out=complete);

    // Reset counter when loading new data
    Or(a=complete, b=load, out=resetSignal);
    Mux(a=false, b=nextCount0, sel=resetSignal, out=nextCount0);
    Mux(a=false, b=nextCount1, sel=resetSignal, out=nextCount1);
}
